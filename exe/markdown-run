#!/usr/bin/env ruby

require "tempfile"
require "fileutils"
require_relative "../lib/language_configs"
require_relative "../lib/markdown_processor"

# Script to process markdown files, execute code blocks based on language,
# and insert their results back into the markdown.

def process_markdown_file_main(input_file_path)
  unless File.exist?(input_file_path) && File.readable?(input_file_path)
    warn "Error: Input file '#{input_file_path}' not found or not readable."
    return false # Indicate failure
  end

  temp_dir = File.dirname(File.expand_path(input_file_path))
  file_enum = File.foreach(input_file_path, chomp: false).to_enum

  processor = MarkdownProcessor.new(temp_dir)
  output_lines = processor.process_file(file_enum)

  # Write the modified content back to the input file
  Tempfile.create([ "md_exec_out_", File.extname(input_file_path) ], temp_dir) do |temp_output_file|
    temp_output_file.write(output_lines.join(""))
    temp_output_file.close
    begin
      FileUtils.mv(temp_output_file.path, input_file_path)
    rescue Errno::EACCES, Errno::EXDEV
      warn "Atomic move failed. Falling back to copy and delete."
      FileUtils.cp(temp_output_file.path, input_file_path)
      FileUtils.rm_f(temp_output_file.path)
    end
  end
  warn "Markdown processing complete. Output written to #{input_file_path}"
  true # Indicate success
end

if ARGV.empty?
  puts "Running tests..."
  require_relative "../test_markdown_exec"
else
  process_markdown_file_main(ARGV[0])
end

